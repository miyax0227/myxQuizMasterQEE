{"headers":[{"key":"pos","value":true,"style":"boolean"}],"items":[{"key":"o","value":0,"style":"number","css":"o"},{"key":"x","value":0,"style":"number","css":"x"},{"key":"combo","value":0,"style":"number","css":"combo"}],"priority":[{"key":"status","order":"desc","alter":["win",2,"lose",0,1]},{"key":"o","order":"desc"},{"key":"x","order":"asc"}],"actions":[{"name":"○","css":"action_o","button_css":"btn btn-primary btn-lg","keyArray":"k1","tweet":"o","enable0":"return (player.status == 'normal' && !header.playoff);","action0":"// ○を加算\nplayer.o++;\n// コンボ計算\nif (property.combo > 0 && player.combo === 1) {\n  player.o += property.combo;\n}\n// コンボ管理\nif (property.combo > 0) {\n  players.map(function(p) {\n    p.combo = 0;\n  });\n  player.combo = 1;\n}\nsetMotion(player, 'o');\naddQCount(players, header, property);"},{"name":"×","css":"action_x","button_css":"btn btn-danger btn-lg","keyArray":"k2","tweet":"x","enable0":"return (player.status == 'normal' && !header.playoff);","action0":"// swedishルールの場合\nif (angular.isArray(property.swedish)) {\n  if (property.swedish[player.o] !== undefined) {\n    player.x += property.swedish[player.o];\n  } else {\n    player.x += property.swedish[property.swedish.length - 1];\n  }\n  // swedishルールではない場合\n} else {\n  // ×を加算\n  player.x++;\n}\n// コンボ管理\nplayer.combo = 0;\n// up-downルールの場合、○を初期化\nif (property.updown) {\n  player.o = 0;\n}\n\nsetMotion(player, 'x');\naddQCount(players, header, property);"}],"global_actions":[{"name":"thru","button_css":"btn btn-default","group":"rule","keyboard":"Space","tweet":"thru","enable0":"return true;","action0":"addQCount(players, header, property);"},{"name":"pos","button_css":"btn btn-default","group":"rule","enable0":"return true;","action0":"header.pos = !header.pos;","keyArray":""}],"global_actions_repeat":[],"tweet":{"o":"${handleName}◯　→${o}◯","x":"${handleName}×","thru":"スルー"},"judgement":"angular.forEach(players.filter(function(item) {\n  /* rankがない人に限定 */\n  return (item.rank === 0);\n}), function(player, i) {\n  /* win条件 */\n  if (player.o >= property.winningPoint) {\n\n    win(player, players, header, property);\n    player.o = property.winningPoint;\n    player.combo = 0;\n    timerStop();\n    // 勝抜が出ると残るプレイヤーのポイントをリセット\n    angular.forEach(players, function(p) {\n      if (p.status == \"normal\") {\n        p.o = 0;\n      }\n    });\n\n  }\n  /* lose条件 */\n  if (player.x >= property.losingPoint) {\n    lose(player, players, header, property);\n    player.x = property.losingPoint;\n    player.combo = 0;\n    player.o = 0;\n    timerStop();\n  }\n});","calc":"header.rest = property.maxRankDisplay - players.filter(function(p) {\n  return p.status == \"win\";\n}).length;\n\nangular.forEach(players, function(player, index) {\n  // pinch, chance\n  player.pinch = (player.x == property.losingPoint - 1) && (player.status == 'normal');\n  player.chance = (player.o + 1 + player.combo * property.combo >= property.winningPoint) &&\n    (player.status == 'normal');\n\n  // キーボード入力時の配列の紐付け ローリング等の特殊形式でない場合はこのままでOK\\\n  player.keyIndex = player.position;\n  switch (true) {\n    case (player.position <= 4):\n      player.line = \"line1\";\n      break;\n    case (player.position <= 9):\n      player.line = \"line2\";\n      break;\n    case (player.position <= 14):\n      player.line = \"line3\";\n      break;\n    default:\n      player.line = \"line4\";\n      break;\n  }\n});","lines":[{"key":"line1","xType":true,"yType":false,"invisible":false,"zoom":1,"left":1,"right":0.52,"top":0,"y":0.75,"orderBy":"position"},{"key":"line2","orderBy":"position","xType":true,"yType":false,"invisible":false,"zoom":1,"left":0.48,"right":0,"y":0.75},{"key":"line3","orderBy":"position","xType":true,"yType":false,"invisible":false,"zoom":1,"left":1,"right":0.52,"y":0.35},{"key":"line4","orderBy":"position","xType":true,"yType":false,"invisible":false,"zoom":1,"left":0.48,"right":0,"y":0.35}]}